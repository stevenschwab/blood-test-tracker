/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.up = function(knex) {
  return knex.schema
    .createTable('biomarker_categories', biomarker_categories => {
        biomarker_categories.increments('category_id').primary()
        biomarker_categories.text('category_name').notNullable().unique()
    })
    .createTable('biomarker_units', biomarker_units => {
        biomarker_units.increments('unit_id').primary()
        biomarker_units.text('units').notNullable().unique()
    })
    .createTable('medical_laboratories', medical_laboratories => {
        medical_laboratories.increments('medical_lab_id').primary()
        medical_laboratories.text('medical_lab_name').notNullable().unique()
        medical_laboratories.text('medical_lab_address').notNullable()
        medical_laboratories.text('medical_lab_phone_number').unique()
        medical_directors.text('medical_director_name').notNullable()
    })
    .createTable('states', states => {
        states.increments('state_id').primary()
        states.text('state_name').notNullable().unique()
    })
    .createTable('report_statuses', report_statuses => {
        report_statuses.increments('report_status_id').primary()
        report_statuses.text('report_status_name').notNullable().unique()
    })
    .createTable('medical_physicians', medical_physicians => {
        medical_physicians.increments('medical_physician_id').primary()
        medical_physicians.text('medical_physician_name').notNullable()
        medical_physicians.text('medical_physician_address')
        medical_physicians.text('medical_physician_address_two')
        medical_physicians.text('medical_physician_city')
        medical_physicians.text('medical_physician_state_id')
            .unsigned()
            .notNullable()
            .references('state_id')
            .inTable('states')
            .onUpdate('RESTRICT')
            .onDelete('RESTRICT')
        medical_physicians.text('medical_physician_zip_code')
        medical_physicians.text('medical_physician_phone_number').unique()
        medical_physicians.text('medical_physician_medical_license_number').unique()
    })
    .createTable('fasting', fasting => {
        fasting.increments('fasting_id').primary()
        fasting.text('fasted').notNullable().unique()
    })
    .createTable('clients', clients => {
        clients.increments('client_id').primary()
        clients.text('client_name').notNullable().unique()
        clients.text('client_address').notNullable()
        clients.text('client_address_two')
        clients.text('client_city')
        clients.integer('client_state_id')
            .unsigned()
            .notNullable()
            .references('state_id')
            .inTable('states')
            .onUpdate('RESTRICT')
            .onDelete('RESTRICT')
        clients.text('client_zip_code')
        clients.text('client_phone_number').notNullable()
    })
    .createTable('biomarkers', biomarkers => {
        biomarkers.increments('biomarker_id').primary()
        biomarkers.integer('biomarker_category_id')
            .unsigned()
            .notNullable()
            .references('category_id')
            .inTable('biomarker_categories')
            .onUpdate('RESTRICT')
            .onDelete('RESTRICT')
        biomarkers.text('biomarker_name').notNullable().unique()
        biomarkers.text('biomarker_blood_key').notNullable().unique()
        biomarkers.text('biomarker_range')
        biomarkers.integer('biomarker_unit_id')
            .unsigned()
            .notNullable()
            .references('unit_id')
            .inTable('biomarker_units')
            .onUpdate('RESTRICT')
            .onDelete('RESTRICT')
        biomarkers.text('biomarker_info')
    })
    .createTable('blood_test_results', blood_test_results => {
        blood_test_results.increments('id').primary()
        blood_test_results.integer('user_id')
            .unsigned()
            .notNullable()
            .references('user_id')
            .inTable('users')
            .onUpdate('RESTRICT')
            .onDelete('RESTRICT')
        blood_test_results.text('medical_lab_id')
            .unsigned()
            .notNullable()
            .references('medical_lab_id')
            .inTable('medical_laboratories')
            .onUpdate('RESTRICT')
            .onDelete('RESTRICT')
        blood_test_results.integer('physician_id')
            .unsigned()
            .notNullable()
            .references('medical_physician_id')
            .inTable('medical_physicians')
            .onUpdate('RESTRICT')
            .onDelete('RESTRICT')
        blood_test_results.integer('fasting_id')
            .unsigned()
            .notNullable()
            .references('fasting_id')
            .inTable('fasting')
            .onUpdate('RESTRICT')
            .onDelete('RESTRICT')
        blood_test_results.integer('account_number')
        blood_test_results.integer('chart_number')
        blood_test_results.text('first_reported_on')
        blood_test_results.text('collection_date')
        blood_test_results.text('collection_time')
        blood_test_results.text('receival_date')
        blood_test_results.text('receival_time')
        blood_test_results.text('final_report_date')
        blood_test_results.text('print_date')
        blood_test_results.text('print_time')
        blood_test_results.integer('report_id').notNullable()
        blood_test_results.text('report_status_id')
            .unsigned()
            .references('report_status_id')
            .inTable('report_statuses')
            .onUpdate('RESTRICT')
            .onDelete('RESTRICT')
        blood_test_results.integer('biomarker_id')
            .unsigned()
            .notNullable()
            .references('biomarker_id')
            .inTable('biomarkers')
            .onUpdate('RESTRICT')
            .onDelete('RESTRICT')
        blood_test_results.float('value')
    })
};

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.down = function(knex) {
  return knex.schema
    .dropTableIfExists('test_results')
    .dropTableIfExists('biomarkers')
    .dropTableIfExists('labs')
    .dropTableIfExists('biomarker_units')
    .dropTableIfExists('biomarker_categories')
};
